// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/k-morozov/go-musthave-diploma-tpl/adaptors/store (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/k-morozov/go-musthave-diploma-tpl/adaptors/store/models"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockStore) AddOrder(arg0 context.Context, arg1 models.AddOrderData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockStoreMockRecorder) AddOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockStore)(nil).AddOrder), arg0, arg1)
}

// GetNewOrders mocks base method.
func (m *MockStore) GetNewOrders(arg0 context.Context, arg1, arg2 int) (models.LockNewOrders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewOrders", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.LockNewOrders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewOrders indicates an expected call of GetNewOrders.
func (mr *MockStoreMockRecorder) GetNewOrders(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewOrders", reflect.TypeOf((*MockStore)(nil).GetNewOrders), arg0, arg1, arg2)
}

// GetOrders mocks base method.
func (m *MockStore) GetOrders(arg0 context.Context, arg1 models.GetOrdersData) (models.GetOrdersDataResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0, arg1)
	ret0, _ := ret[0].(models.GetOrdersDataResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockStoreMockRecorder) GetOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockStore)(nil).GetOrders), arg0, arg1)
}

// GetOwnerForOrder mocks base method.
func (m *MockStore) GetOwnerForOrder(arg0 context.Context, arg1 models.GetOwnerForOrderData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnerForOrder", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnerForOrder indicates an expected call of GetOwnerForOrder.
func (mr *MockStoreMockRecorder) GetOwnerForOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnerForOrder", reflect.TypeOf((*MockStore)(nil).GetOwnerForOrder), arg0, arg1)
}

// GetUserBalance mocks base method.
func (m *MockStore) GetUserBalance(arg0 context.Context, arg1 models.GetUserBalanceData) (models.GetUserBalanceDataResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", arg0, arg1)
	ret0, _ := ret[0].(models.GetUserBalanceDataResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockStoreMockRecorder) GetUserBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockStore)(nil).GetUserBalance), arg0, arg1)
}

// LoginUser mocks base method.
func (m *MockStore) LoginUser(arg0 context.Context, arg1 models.LoginData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockStoreMockRecorder) LoginUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockStore)(nil).LoginUser), arg0, arg1)
}

// ProcessedOrder mocks base method.
func (m *MockStore) ProcessedOrder(arg0 context.Context, arg1 models.OrderData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessedOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessedOrder indicates an expected call of ProcessedOrder.
func (mr *MockStoreMockRecorder) ProcessedOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessedOrder", reflect.TypeOf((*MockStore)(nil).ProcessedOrder), arg0, arg1)
}

// RegisterUser mocks base method.
func (m *MockStore) RegisterUser(arg0 context.Context, arg1 models.RegisterData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockStoreMockRecorder) RegisterUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockStore)(nil).RegisterUser), arg0, arg1)
}

// RestoreNewOrders mocks base method.
func (m *MockStore) RestoreNewOrders(arg0 context.Context, arg1 int) (models.LockNewOrders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreNewOrders", arg0, arg1)
	ret0, _ := ret[0].(models.LockNewOrders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreNewOrders indicates an expected call of RestoreNewOrders.
func (mr *MockStoreMockRecorder) RestoreNewOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreNewOrders", reflect.TypeOf((*MockStore)(nil).RestoreNewOrders), arg0, arg1)
}

// Withdraw mocks base method.
func (m *MockStore) Withdraw(arg0 context.Context, arg1 models.WithdrawData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockStoreMockRecorder) Withdraw(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockStore)(nil).Withdraw), arg0, arg1)
}

// Withdrawals mocks base method.
func (m *MockStore) Withdrawals(arg0 context.Context, arg1 models.WithdrawalsData) (models.WithdrawsDataResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdrawals", arg0, arg1)
	ret0, _ := ret[0].(models.WithdrawsDataResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdrawals indicates an expected call of Withdrawals.
func (mr *MockStoreMockRecorder) Withdrawals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawals", reflect.TypeOf((*MockStore)(nil).Withdrawals), arg0, arg1)
}
