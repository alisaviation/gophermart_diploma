// Code generated by mockery v2.14.0. DO NOT EDIT.

package handler

import (
	context "context"
	domain "github.com/brisk84/gofemart/domain"

	mock "github.com/stretchr/testify/mock"
)

// useCaseMock is an autogenerated mock type for the useCase type
type useCaseMock struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *useCaseMock) CreateOrder(ctx context.Context, order domain.Order) (domain.Order, error) {
	ret := _m.Called(ctx, order)

	var r0 domain.Order
	if rf, ok := ret.Get(0).(func(context.Context, domain.Order) domain.Order); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(domain.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *useCaseMock) CreateUser(ctx context.Context, user domain.User) (domain.User, error) {
	ret := _m.Called(ctx, user)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) domain.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrder provides a mock function with given fields: ctx, orderID
func (_m *useCaseMock) GetOrder(ctx context.Context, orderID int64) (domain.Order, error) {
	ret := _m.Called(ctx, orderID)

	var r0 domain.Order
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Order); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Get(0).(domain.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, userID
func (_m *useCaseMock) GetUser(ctx context.Context, userID int64) (domain.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewUseCaseMock interface {
	mock.TestingT
	Cleanup(func())
}

// newUseCaseMock creates a new instance of useCaseMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newUseCaseMock(t mockConstructorTestingTnewUseCaseMock) *useCaseMock {
	mock := &useCaseMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
