// Code generated by MockGen. DO NOT EDIT.
// Source: ./auth.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/kamencov/go-musthave-diploma-tpl/internal/service/auth/entity"
)

// MockStorageAuth is a mock of StorageAuth interface.
type MockStorageAuth struct {
	ctrl     *gomock.Controller
	recorder *MockStorageAuthMockRecorder
}

// MockStorageAuthMockRecorder is the mock recorder for MockStorageAuth.
type MockStorageAuthMockRecorder struct {
	mock *MockStorageAuth
}

// NewMockStorageAuth creates a new mock instance.
func NewMockStorageAuth(ctrl *gomock.Controller) *MockStorageAuth {
	mock := &MockStorageAuth{ctrl: ctrl}
	mock.recorder = &MockStorageAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageAuth) EXPECT() *MockStorageAuthMockRecorder {
	return m.recorder
}

// AuthUser mocks base method.
func (m *MockStorageAuth) AuthUser(ctx context.Context, login, password string) (entity.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUser", ctx, login, password)
	ret0, _ := ret[0].(entity.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthUser indicates an expected call of AuthUser.
func (mr *MockStorageAuthMockRecorder) AuthUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUser", reflect.TypeOf((*MockStorageAuth)(nil).AuthUser), ctx, login, password)
}

// GeneratedTokens mocks base method.
func (m *MockStorageAuth) GeneratedTokens(ctx context.Context, login string) (entity.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratedTokens", ctx, login)
	ret0, _ := ret[0].(entity.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratedTokens indicates an expected call of GeneratedTokens.
func (mr *MockStorageAuthMockRecorder) GeneratedTokens(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratedTokens", reflect.TypeOf((*MockStorageAuth)(nil).GeneratedTokens), ctx, login)
}

// HashPassword mocks base method.
func (m *MockStorageAuth) HashPassword(password string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	return ret0
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockStorageAuthMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockStorageAuth)(nil).HashPassword), password)
}

// RefreshToken mocks base method.
func (m *MockStorageAuth) RefreshToken(ctx context.Context, token string) (entity.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, token)
	ret0, _ := ret[0].(entity.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockStorageAuthMockRecorder) RefreshToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockStorageAuth)(nil).RefreshToken), ctx, token)
}

// RegisterUser mocks base method.
func (m *MockStorageAuth) RegisterUser(ctx context.Context, login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockStorageAuthMockRecorder) RegisterUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockStorageAuth)(nil).RegisterUser), ctx, login, password)
}

// VerifyUser mocks base method.
func (m *MockStorageAuth) VerifyUser(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUser", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUser indicates an expected call of VerifyUser.
func (mr *MockStorageAuthMockRecorder) VerifyUser(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUser", reflect.TypeOf((*MockStorageAuth)(nil).VerifyUser), token)
}
